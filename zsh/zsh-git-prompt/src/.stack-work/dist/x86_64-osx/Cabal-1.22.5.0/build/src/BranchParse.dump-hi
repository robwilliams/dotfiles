
==================== FINAL INTERFACE ====================
2019-02-04 11:14:20.139731 UTC

interface gitpr_GyKbGQsRujX2Ik9bjYPmgX:BranchParse 7103
  interface hash: d7e87b25998a85a58ca106d678e0a704
  ABI hash: 1e5e195ae70e90b84f91dba4c1309f6d
  export-list hash: 31ed7a88d826371e4a9ed18cde838aba
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 4c0a7b65a6dddbc4161c2e2bfabe3dc3
  sig of: Nothing
  used TH splices: False
  where
exports:
  BranchParse.ahead
  BranchParse.aheadBehind
  BranchParse.behind
  BranchParse.branchInfo
  BranchParse.branchOnly
  BranchParse.branchParser
  BranchParse.branchParser'
  BranchParse.branchRemote
  BranchParse.branchRemoteTracking
  BranchParse.getDistance
  BranchParse.inBrackets
  BranchParse.isValidBranch
  BranchParse.makeAheadBehind
  BranchParse.newRepo
  BranchParse.noBranch
  BranchParse.pairFromDistance
  BranchParse.trackedBranch
  BranchParse.Branch{BranchParse.MkBranch}
  BranchParse.BranchInfo{BranchParse.MkBranchInfo}
  BranchParse.Distance{BranchParse.Ahead BranchParse.AheadBehind BranchParse.Behind}
  BranchParse.MBranchInfo
  BranchParse.Remote{BranchParse.MkRemote}
module dependencies:
package dependencies: QuickCheck-2.8.1@Quick_8UnGnTXfSEEClQczG6tI7s
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0*
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      parsec-3.1.9@parse_EE5NO1mlYLh4J8mgDEshNv
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL template-haskell-2.10.0.0
                      text-1.2.2.0@text_5c7VCmRXJenGcMPs3kwpkI
                      tf-random-0.5@tfran_1eLmkn3WUnC8NZpPuDLGKF
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         text-1.2.2.0@text_5c7VCmRXJenGcMPs3kwpkI:Data.Text
         text-1.2.2.0@text_5c7VCmRXJenGcMPs3kwpkI:Data.Text.Lazy
         text-1.2.2.0@text_5c7VCmRXJenGcMPs3kwpkI:Data.Text.Show
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.0@text_5c7VCmRXJenGcMPs3kwpkI:Data.Text
                         text-1.2.2.0@text_5c7VCmRXJenGcMPs3kwpkI:Data.Text.Lazy
import  -/  QuickCheck-2.8.1@Quick_8UnGnTXfSEEClQczG6tI7s:Test.QuickCheck 437de8bc77c4cf58d9f8e24d5f1189e0
import  -/  QuickCheck-2.8.1@Quick_8UnGnTXfSEEClQczG6tI7s:Test.QuickCheck.Arbitrary 5b0fb1f0c5892614b4f635b9443c97b1
import  -/  QuickCheck-2.8.1@Quick_8UnGnTXfSEEClQczG6tI7s:Test.QuickCheck.Gen 99ea14d47e0743a0e0483e3176e4e3ae
import  -/  QuickCheck-2.8.1@Quick_8UnGnTXfSEEClQczG6tI7s:Test.QuickCheck.Modifiers 39eb2b07d20c716b998370c93f9f5271
import  -/  base-4.8.2.0:Control.Applicative a8ebf5ad4932b411ad7725da68be9801
import  -/  base-4.8.2.0:Data.Either e8724afd65fd432cfe9a54014f5f762d
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:Text.Read ef0ef92fb7358ae94bab089940adfd2a
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  parsec-3.1.9@parse_EE5NO1mlYLh4J8mgDEshNv:Text.Parsec cd641c471d37c56fce6c0888a7593ef6
import  -/  parsec-3.1.9@parse_EE5NO1mlYLh4J8mgDEshNv:Text.Parsec.Char 97bbf09954cc6c0bab2bf540581e2232
import  -/  parsec-3.1.9@parse_EE5NO1mlYLh4J8mgDEshNv:Text.Parsec.Combinator 9ff919ff31049812480fec7d6a7087a3
import  -/  parsec-3.1.9@parse_EE5NO1mlYLh4J8mgDEshNv:Text.Parsec.Error 7b333998548347c2f7f0a9fe62fae408
import  -/  parsec-3.1.9@parse_EE5NO1mlYLh4J8mgDEshNv:Text.Parsec.Prim c5a12ad5e0058c84c66e6dc2e8b898ed
import  -/  parsec-3.1.9@parse_EE5NO1mlYLh4J8mgDEshNv:Text.Parsec.String a98b8cb04701d85644de70d18cd1e4bc
01dbc60c21731e72c2918ece139135d4
  $fArbitraryBranch ::
    Test.QuickCheck.Arbitrary.Arbitrary BranchParse.Branch
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BranchParse.Branch
                  BranchParse.$fArbitraryBranch_$carbitrary
                  BranchParse.$fArbitraryBranch_$s$dmshrink -}
a74d5c3dd0f31d50d7d637c49ac67e0c
  $fArbitraryBranch1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><S,1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Test.QuickCheck.Random.QCGen w1 :: GHC.Types.Int ->
                 case w1 of ww { GHC.Types.I# ww1 -> BranchParse.$wa w ww1 }) -}
1358a16e9798b51dff2051bdfc9f8a81
  $fArbitraryBranch2 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ w1 :: Test.QuickCheck.Random.QCGen w2 :: GHC.Types.Int ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Test.QuickCheck.Arbitrary.$wa18
                   @ GHC.Types.Char
                   Test.QuickCheck.Arbitrary.$fArbitraryChar
                   w1
                   ww1 }) -}
01dbc60c21731e72c2918ece139135d4
  $fArbitraryBranch_$carbitrary ::
    Test.QuickCheck.Gen.Gen BranchParse.Branch
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                BranchParse.$fArbitraryBranch1
                  `cast`
                (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                          (BranchParse.NTCo:Branch[0]))) -}
01dbc60c21731e72c2918ece139135d4
  $fArbitraryBranch_$s$dmshrink ::
    BranchParse.Branch -> [BranchParse.Branch]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds1 :: BranchParse.Branch ->
                 GHC.Types.[] @ BranchParse.Branch) -}
9a679f27586adbce59110bb1536539a6
  $fArbitraryDistance ::
    Test.QuickCheck.Arbitrary.Arbitrary BranchParse.Distance
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BranchParse.Distance
                  BranchParse.$fArbitraryDistance_$carbitrary
                  BranchParse.$fArbitraryDistance_$s$dmshrink -}
9a679f27586adbce59110bb1536539a6
  $fArbitraryDistance1 ::
    [Test.QuickCheck.Gen.Gen BranchParse.Distance]
  {- Unfolding: (GHC.Types.:
                   @ (Test.QuickCheck.Gen.Gen BranchParse.Distance)
                   BranchParse.$fArbitraryDistance11
                     `cast`
                   (Sym (Test.QuickCheck.Gen.NTCo:Gen[0] <BranchParse.Distance>_R))
                   BranchParse.$fArbitraryDistance2) -}
9a679f27586adbce59110bb1536539a6
  $fArbitraryDistance10 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> GHC.Types.Int -> BranchParse.Distance
  {- Arity: 3, HasNoCafRefs,
     Unfolding: (\ ds :: Test.QuickCheck.Random.QCGen
                   ds1 :: GHC.Types.Int[OneShot]
                   eta :: GHC.Types.Int[OneShot] ->
                 BranchParse.Behind eta) -}
9a679f27586adbce59110bb1536539a6
  $fArbitraryDistance11 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> BranchParse.Distance
  {- Arity: 2,
     Unfolding: (Test.QuickCheck.Gen.$fApplicativeGen3
                   @ GHC.Types.Int
                   @ BranchParse.Distance
                   BranchParse.$fArbitraryDistance12
                     `cast`
                   (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                             <GHC.Types.Int -> BranchParse.Distance>_R))
                   BranchParse.$fArbitraryDistance5
                     `cast`
                   (Sym (Test.QuickCheck.Gen.NTCo:Gen[0] <GHC.Types.Int>_R))) -}
9a679f27586adbce59110bb1536539a6
  $fArbitraryDistance12 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> GHC.Types.Int -> BranchParse.Distance
  {- Arity: 3, HasNoCafRefs,
     Unfolding: (\ ds :: Test.QuickCheck.Random.QCGen
                   ds1 :: GHC.Types.Int[OneShot]
                   eta :: GHC.Types.Int[OneShot] ->
                 BranchParse.Ahead eta) -}
9a679f27586adbce59110bb1536539a6
  $fArbitraryDistance2 ::
    [Test.QuickCheck.Gen.Gen BranchParse.Distance]
  {- Unfolding: (GHC.Types.:
                   @ (Test.QuickCheck.Gen.Gen BranchParse.Distance)
                   BranchParse.$fArbitraryDistance9
                     `cast`
                   (Sym (Test.QuickCheck.Gen.NTCo:Gen[0] <BranchParse.Distance>_R))
                   BranchParse.$fArbitraryDistance3) -}
9a679f27586adbce59110bb1536539a6
  $fArbitraryDistance3 ::
    [Test.QuickCheck.Gen.Gen BranchParse.Distance]
  {- Unfolding: (GHC.Types.:
                   @ (Test.QuickCheck.Gen.Gen BranchParse.Distance)
                   BranchParse.$fArbitraryDistance4
                     `cast`
                   (Sym (Test.QuickCheck.Gen.NTCo:Gen[0] <BranchParse.Distance>_R))
                   (GHC.Types.[] @ (Test.QuickCheck.Gen.Gen BranchParse.Distance))) -}
9a679f27586adbce59110bb1536539a6
  $fArbitraryDistance4 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> BranchParse.Distance
  {- Arity: 2,
     Unfolding: (Test.QuickCheck.Gen.$fApplicativeGen3
                   @ GHC.Types.Int
                   @ BranchParse.Distance
                   BranchParse.$fArbitraryDistance8
                     `cast`
                   (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                             <GHC.Types.Int -> BranchParse.Distance>_R))
                   BranchParse.$fArbitraryDistance5
                     `cast`
                   (Sym (Test.QuickCheck.Gen.NTCo:Gen[0] <GHC.Types.Int>_R))) -}
44d6ea7a6103cb15a2bbe7e56563bac3
  $fArbitraryDistance5 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 2,
     Unfolding: (Test.QuickCheck.Gen.$fApplicativeGen3
                   @ (Test.QuickCheck.Modifiers.Positive GHC.Types.Int)
                   @ GHC.Types.Int
                   BranchParse.$fArbitraryDistance7
                     `cast`
                   (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                             (<Test.QuickCheck.Modifiers.Positive GHC.Types.Int>_R
                              ->_R Sym (Test.QuickCheck.Modifiers.NTCo:Positive[0]
                                            <GHC.Types.Int>_R))))
                   BranchParse.$fArbitraryDistance6) -}
9d50e60abf58786aeadacd0524940f19
  $fArbitraryDistance6 ::
    Test.QuickCheck.Gen.Gen
      (Test.QuickCheck.Modifiers.Positive GHC.Types.Int)
  {- Unfolding: (Test.QuickCheck.Modifiers.$fArbitraryPositive_$carbitrary
                   @ GHC.Types.Int
                   GHC.Num.$fNumInt
                   GHC.Classes.$fOrdInt
                   Test.QuickCheck.Arbitrary.$fArbitraryInt) -}
689fd3d930759cbe9c07b5f02ffcfd85
  $fArbitraryDistance7 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Modifiers.Positive GHC.Types.Int
    -> Test.QuickCheck.Modifiers.Positive GHC.Types.Int
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,1*U(U)>m,
     Unfolding: InlineRule (3, True, True)
                (\ ds :: Test.QuickCheck.Random.QCGen
                   ds1 :: GHC.Types.Int
                   eta :: Test.QuickCheck.Modifiers.Positive GHC.Types.Int ->
                 eta) -}
9a679f27586adbce59110bb1536539a6
  $fArbitraryDistance8 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> GHC.Types.Int -> BranchParse.Distance
  {- Arity: 2,
     Unfolding: (\ r :: Test.QuickCheck.Random.QCGen
                   n :: GHC.Types.Int[OneShot] ->
                 BranchParse.AheadBehind
                   (Test.QuickCheck.Gen.$fApplicativeGen3
                      @ (Test.QuickCheck.Modifiers.Positive GHC.Types.Int)
                      @ GHC.Types.Int
                      BranchParse.$fArbitraryDistance7
                        `cast`
                      (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                                (<Test.QuickCheck.Modifiers.Positive GHC.Types.Int>_R
                                 ->_R Sym (Test.QuickCheck.Modifiers.NTCo:Positive[0]
                                               <GHC.Types.Int>_R))))
                      BranchParse.$fArbitraryDistance6
                      r
                      n)) -}
9a679f27586adbce59110bb1536539a6
  $fArbitraryDistance9 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> BranchParse.Distance
  {- Arity: 2,
     Unfolding: (Test.QuickCheck.Gen.$fApplicativeGen3
                   @ GHC.Types.Int
                   @ BranchParse.Distance
                   BranchParse.$fArbitraryDistance10
                     `cast`
                   (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                             <GHC.Types.Int -> BranchParse.Distance>_R))
                   BranchParse.$fArbitraryDistance5
                     `cast`
                   (Sym (Test.QuickCheck.Gen.NTCo:Gen[0] <GHC.Types.Int>_R))) -}
9a679f27586adbce59110bb1536539a6
  $fArbitraryDistance_$carbitrary ::
    Test.QuickCheck.Gen.Gen BranchParse.Distance
  {- Unfolding: (Test.QuickCheck.Gen.oneof
                   @ BranchParse.Distance
                   BranchParse.$fArbitraryDistance1) -}
9a679f27586adbce59110bb1536539a6
  $fArbitraryDistance_$s$dmshrink ::
    BranchParse.Distance -> [BranchParse.Distance]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds1 :: BranchParse.Distance ->
                 GHC.Types.[] @ BranchParse.Distance) -}
01dbc60c21731e72c2918ece139135d4
  $fEqBranch :: GHC.Classes.Eq BranchParse.Branch
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BranchParse.Branch
                  BranchParse.$fEqBranch_$c==
                  BranchParse.$fEqBranch_$c/= -}
cef72515ed3d434c3acceafa44cad2b9
  $fEqBranchInfo :: GHC.Classes.Eq BranchParse.BranchInfo
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BranchParse.BranchInfo
                  BranchParse.$fEqBranchInfo_$c==
                  BranchParse.$fEqBranchInfo_$c/= -}
cef72515ed3d434c3acceafa44cad2b9
  $fEqBranchInfo_$c/= ::
    BranchParse.BranchInfo -> BranchParse.BranchInfo -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a8 :: BranchParse.BranchInfo b :: BranchParse.BranchInfo ->
                 case BranchParse.$fEqBranchInfo_$c== a8 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
cef72515ed3d434c3acceafa44cad2b9
  $fEqBranchInfo_$c== ::
    BranchParse.BranchInfo -> BranchParse.BranchInfo -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: BranchParse.BranchInfo w1 :: BranchParse.BranchInfo ->
                 case w of ww { BranchParse.MkBranchInfo ww1 ww2 ->
                 case w1 of ww3 { BranchParse.MkBranchInfo ww4 ww5 ->
                 BranchParse.$w$c== ww1 ww2 ww4 ww5 } }) -}
5d2ed2340c29307e445aeb4812400c2f
  $fEqBranchInfo_$c==1 ::
    BranchParse.Remote -> BranchParse.Remote -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: BranchParse.Remote w1 :: BranchParse.Remote ->
                 case w of ww { BranchParse.MkRemote ww1 ww2 ->
                 case w1 of ww3 { BranchParse.MkRemote ww4 ww5 ->
                 BranchParse.$w$c==1 ww1 ww2 ww4 ww5 } }) -}
9a679f27586adbce59110bb1536539a6
  $fEqBranchInfo_$c==2 ::
    BranchParse.Distance -> BranchParse.Distance -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: BranchParse.Distance
                   ds1 :: BranchParse.Distance ->
                 case ds of wild {
                   BranchParse.Ahead a8
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        BranchParse.Ahead b1 -> GHC.Classes.eqInt a8 b1 }
                   BranchParse.Behind a8
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        BranchParse.Behind b1 -> GHC.Classes.eqInt a8 b1 }
                   BranchParse.AheadBehind a8 a9
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        BranchParse.AheadBehind b1 b2
                        -> case a8 of wild2 { GHC.Types.I# x ->
                           case b1 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# x y) of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.eqInt a9 b2 } } } } }) -}
01dbc60c21731e72c2918ece139135d4
  $fEqBranch_$c/= ::
    BranchParse.Branch -> BranchParse.Branch -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEq[]_$s$c/=1
                  `cast`
                (Sym (BranchParse.NTCo:Branch[0])
                 ->_R Sym (BranchParse.NTCo:Branch[0])
                 ->_R <GHC.Types.Bool>_R) -}
01dbc60c21731e72c2918ece139135d4
  $fEqBranch_$c== ::
    BranchParse.Branch -> BranchParse.Branch -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Base.eqString
                  `cast`
                (Sym (BranchParse.NTCo:Branch[0])
                 ->_R Sym (BranchParse.NTCo:Branch[0])
                 ->_R <GHC.Types.Bool>_R) -}
9a679f27586adbce59110bb1536539a6
  $fEqDistance :: GHC.Classes.Eq BranchParse.Distance
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BranchParse.Distance
                  BranchParse.$fEqBranchInfo_$c==2
                  BranchParse.$fEqDistance_$c/= -}
9a679f27586adbce59110bb1536539a6
  $fEqDistance_$c/= ::
    BranchParse.Distance -> BranchParse.Distance -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a8 :: BranchParse.Distance b :: BranchParse.Distance ->
                 case BranchParse.$fEqBranchInfo_$c==2 a8 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
5d2ed2340c29307e445aeb4812400c2f
  $fEqRemote :: GHC.Classes.Eq BranchParse.Remote
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BranchParse.Remote
                  BranchParse.$fEqBranchInfo_$c==1
                  BranchParse.$fEqRemote_$c/= -}
5d2ed2340c29307e445aeb4812400c2f
  $fEqRemote_$c/= ::
    BranchParse.Remote -> BranchParse.Remote -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a8 :: BranchParse.Remote b :: BranchParse.Remote ->
                 case BranchParse.$fEqBranchInfo_$c==1 a8 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
01dbc60c21731e72c2918ece139135d4
  $fShowBranch :: GHC.Show.Show BranchParse.Branch
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BranchParse.Branch
                  BranchParse.$fShowBranch_$s$dmshowsPrec
                  BranchParse.$fShowBranch_$cshow
                  BranchParse.$fShowBranch_$cshowList -}
01dbc60c21731e72c2918ece139135d4
  $fShowBranch1 :: BranchParse.Branch -> BranchParse.Branch
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: BranchParse.Branch -> ds) -}
cef72515ed3d434c3acceafa44cad2b9
  $fShowBranchInfo :: GHC.Show.Show BranchParse.BranchInfo
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BranchParse.BranchInfo
                  BranchParse.$fShowBranchInfo_$cshowsPrec
                  BranchParse.$fShowBranchInfo_$cshow
                  BranchParse.$fShowBranchInfo_$cshowList -}
cef72515ed3d434c3acceafa44cad2b9
  $fShowBranchInfo1 :: BranchParse.BranchInfo -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: BranchParse.BranchInfo ->
                 case w of ww { BranchParse.MkBranchInfo ww1 ww2 ->
                 BranchParse.$w$cshowsPrec 0 ww1 ww2 }) -}
4f9058b487ce1f48fd8b1c6f5383bedd
  $fShowBranchInfo2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MkBranchInfo "#) -}
31418749ba2d5f4d62b756bea27fa284
  $fShowBranchInfo3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11) -}
78003a41378e90d22acebf4197aca339
  $fShowBranchInfo4 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows8
                   BranchParse.$fShowBranchInfo5) -}
08531807d7b0e648c620714429c95a78
  $fShowBranchInfo5 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows8
                   BranchParse.$fShowRemote3) -}
ee3d6ffbb2bc846b22d73fbea69493b9
  $fShowBranchInfo6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   GHC.Show.$fShowMaybe3
                   BranchParse.$fShowBranchInfo5) -}
cef72515ed3d434c3acceafa44cad2b9
  $fShowBranchInfo_$cshow ::
    BranchParse.BranchInfo -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: BranchParse.BranchInfo ->
                 case w of ww { BranchParse.MkBranchInfo ww1 ww2 ->
                 BranchParse.$w$cshow1 ww1 ww2 }) -}
cef72515ed3d434c3acceafa44cad2b9
  $fShowBranchInfo_$cshowList ::
    [BranchParse.BranchInfo] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ BranchParse.BranchInfo
                   BranchParse.$fShowBranchInfo1) -}
cef72515ed3d434c3acceafa44cad2b9
  $fShowBranchInfo_$cshowsPrec ::
    GHC.Types.Int -> BranchParse.BranchInfo -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: BranchParse.BranchInfo ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { BranchParse.MkBranchInfo ww3 ww4 ->
                 BranchParse.$w$cshowsPrec ww1 ww3 ww4 } }) -}
01dbc60c21731e72c2918ece139135d4
  $fShowBranch_$cshow :: BranchParse.Branch -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                BranchParse.$fShowBranch1
                  `cast`
                (<BranchParse.Branch>_R ->_R BranchParse.NTCo:Branch[0]) -}
01dbc60c21731e72c2918ece139135d4
  $fShowBranch_$cshowList :: [BranchParse.Branch] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ ls :: [BranchParse.Branch] s :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ BranchParse.Branch
                   (GHC.Base.++ @ GHC.Types.Char)
                     `cast`
                   (Sym (BranchParse.NTCo:Branch[0])
                    ->_R <GHC.Base.String -> [GHC.Types.Char]>_R)
                   ls
                   s) -}
01dbc60c21731e72c2918ece139135d4
  $fShowBranch_$s$dmshowsPrec ::
    GHC.Types.Int -> BranchParse.Branch -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (-1, True, False)
                (\ ds :: GHC.Types.Int
                   x :: BranchParse.Branch
                   s :: GHC.Base.String ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (BranchParse.$fShowBranch_$cshow x))
                   s) -}
9a679f27586adbce59110bb1536539a6
  $fShowDistance :: GHC.Show.Show BranchParse.Distance
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BranchParse.Distance
                  BranchParse.$fShowDistance_$s$dmshowsPrec
                  BranchParse.$fShowDistance_$cshow
                  BranchParse.$fShowDistance_$cshowList -}
9a679f27586adbce59110bb1536539a6
  $fShowDistance1 ::
    BranchParse.Distance -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ x :: BranchParse.Distance
                   s :: GHC.Base.String[OneShot] ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (BranchParse.$fShowDistance_$cshow x)
                   s) -}
1d29c48560f2f19d1b9719978be79082
  $fShowDistance2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "]"#) -}
9a679f27586adbce59110bb1536539a6
  $fShowDistance_$cshow :: BranchParse.Distance -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds :: BranchParse.Distance ->
                 case ds of wild {
                   BranchParse.Ahead i
                   -> GHC.CString.unpackAppendCString#
                        "[ahead "#
                        (case i of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt
                                0
                                ww3
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Base.++
                           @ GHC.Types.Char
                           (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                           BranchParse.$fShowDistance2 } })
                   BranchParse.Behind i
                   -> GHC.CString.unpackAppendCString#
                        "[behind "#
                        (case i of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt
                                0
                                ww3
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Base.++
                           @ GHC.Types.Char
                           (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                           BranchParse.$fShowDistance2 } })
                   BranchParse.AheadBehind i j
                   -> GHC.CString.unpackAppendCString#
                        "[ahead "#
                        (case i of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt
                                0
                                ww3
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Base.++
                           @ GHC.Types.Char
                           (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                           (GHC.CString.unpackAppendCString#
                              ", behind "#
                              (case j of ww1 { GHC.Types.I# ww8 ->
                               case GHC.Show.$wshowSignedInt
                                      0
                                      ww8
                                      (GHC.Types.[] @ GHC.Types.Char) of ww9 { (#,#) ww10 ww11 ->
                               GHC.Base.++
                                 @ GHC.Types.Char
                                 (GHC.Types.: @ GHC.Types.Char ww10 ww11)
                                 BranchParse.$fShowDistance2 } })) } }) }) -}
9a679f27586adbce59110bb1536539a6
  $fShowDistance_$cshowList ::
    [BranchParse.Distance] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ ls :: [BranchParse.Distance] s :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ BranchParse.Distance
                   BranchParse.$fShowDistance1
                   ls
                   s) -}
9a679f27586adbce59110bb1536539a6
  $fShowDistance_$s$dmshowsPrec ::
    GHC.Types.Int -> BranchParse.Distance -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (-1, True, False)
                (\ ds :: GHC.Types.Int
                   x :: BranchParse.Distance
                   s :: GHC.Base.String ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (BranchParse.$fShowDistance_$cshow x))
                   s) -}
5d2ed2340c29307e445aeb4812400c2f
  $fShowRemote :: GHC.Show.Show BranchParse.Remote
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BranchParse.Remote
                  BranchParse.$fShowRemote_$cshowsPrec
                  BranchParse.$fShowRemote_$cshow
                  BranchParse.$fShowRemote_$cshowList -}
5d2ed2340c29307e445aeb4812400c2f
  $fShowRemote1 :: BranchParse.Remote -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: BranchParse.Remote ->
                 case w of ww { BranchParse.MkRemote ww1 ww2 ->
                 BranchParse.$w$cshowsPrec1 0 ww1 ww2 }) -}
869fc306365da43fc1e60ddd5ea503c9
  $fShowRemote2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MkRemote "#) -}
cc03470b6dc2afe6102f1ea694f1397e
  $fShowRemote3 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows8
                   (GHC.Types.[] @ GHC.Types.Char)) -}
60a186e46683d34b31ab7ac83fdb0228
  $fShowRemote4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   GHC.Show.$fShowMaybe3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5d2ed2340c29307e445aeb4812400c2f
  $fShowRemote_$cshow :: BranchParse.Remote -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: BranchParse.Remote ->
                 case w of ww { BranchParse.MkRemote ww1 ww2 ->
                 BranchParse.$w$cshow ww1 ww2 }) -}
5d2ed2340c29307e445aeb4812400c2f
  $fShowRemote_$cshowList :: [BranchParse.Remote] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ BranchParse.Remote
                   BranchParse.$fShowRemote1) -}
5d2ed2340c29307e445aeb4812400c2f
  $fShowRemote_$cshowsPrec ::
    GHC.Types.Int -> BranchParse.Remote -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: BranchParse.Remote ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { BranchParse.MkRemote ww3 ww4 ->
                 BranchParse.$w$cshowsPrec1 ww1 ww3 ww4 } }) -}
a9d19613bcdf7d7755f45934a193d8e8
  $w$c== ::
    BranchParse.Branch
    -> GHC.Base.Maybe BranchParse.Remote
    -> BranchParse.Branch
    -> GHC.Base.Maybe BranchParse.Remote
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: BranchParse.Branch
                   ww1 :: GHC.Base.Maybe BranchParse.Remote
                   ww2 :: BranchParse.Branch
                   ww3 :: GHC.Base.Maybe BranchParse.Remote ->
                 case GHC.Base.eqString
                        ww `cast` (BranchParse.NTCo:Branch[0])
                        ww2 `cast` (BranchParse.NTCo:Branch[0]) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww1 of wild1 {
                        GHC.Base.Nothing
                        -> case ww3 of wild2 {
                             GHC.Base.Nothing -> GHC.Types.True
                             GHC.Base.Just ipv -> GHC.Types.False }
                        GHC.Base.Just a8
                        -> case ww3 of wild2 {
                             GHC.Base.Nothing -> GHC.Types.False
                             GHC.Base.Just b1
                             -> BranchParse.$fEqBranchInfo_$c==1 a8 b1 } } }) -}
24a27182fd846a39abcb388ad1ae3ef7
  $w$c==1 ::
    BranchParse.Branch
    -> GHC.Base.Maybe BranchParse.Distance
    -> BranchParse.Branch
    -> GHC.Base.Maybe BranchParse.Distance
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: BranchParse.Branch
                   ww1 :: GHC.Base.Maybe BranchParse.Distance
                   ww2 :: BranchParse.Branch
                   ww3 :: GHC.Base.Maybe BranchParse.Distance ->
                 case GHC.Base.eqString
                        ww `cast` (BranchParse.NTCo:Branch[0])
                        ww2 `cast` (BranchParse.NTCo:Branch[0]) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww1 of wild1 {
                        GHC.Base.Nothing
                        -> case ww3 of wild2 {
                             GHC.Base.Nothing -> GHC.Types.True
                             GHC.Base.Just ipv -> GHC.Types.False }
                        GHC.Base.Just a8
                        -> case ww3 of wild2 {
                             GHC.Base.Nothing -> GHC.Types.False
                             GHC.Base.Just b1
                             -> BranchParse.$fEqBranchInfo_$c==2 a8 b1 } } }) -}
6f3c15a01bede743deb6d0f43b502055
  $w$cshow ::
    BranchParse.Branch
    -> GHC.Base.Maybe BranchParse.Distance -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: BranchParse.Branch
                   ww1 :: GHC.Base.Maybe BranchParse.Distance ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   BranchParse.$fShowRemote2
                   (GHC.Base.++
                      @ GHC.Types.Char
                      ww `cast` (BranchParse.NTCo:Branch[0])
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showSpace1
                         (case ww1 of wild {
                            GHC.Base.Nothing -> BranchParse.$fShowRemote4
                            GHC.Base.Just b1
                            -> GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.shows9
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    GHC.Show.$fShowMaybe1
                                    (GHC.Base.++
                                       @ GHC.Types.Char
                                       (BranchParse.$fShowDistance_$cshow b1)
                                       BranchParse.$fShowRemote3)) })))) -}
590a246e905c72ec8fea9eadd24054b1
  $w$cshow1 ::
    BranchParse.Branch
    -> GHC.Base.Maybe BranchParse.Remote -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: BranchParse.Branch
                   ww1 :: GHC.Base.Maybe BranchParse.Remote ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   BranchParse.$fShowBranchInfo2
                   (GHC.Base.++
                      @ GHC.Types.Char
                      ww `cast` (BranchParse.NTCo:Branch[0])
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showSpace1
                         (case ww1 of wild {
                            GHC.Base.Nothing -> BranchParse.$fShowRemote4
                            GHC.Base.Just b1
                            -> GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.shows9
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    GHC.Show.$fShowMaybe1
                                    (case b1 of wild1 { BranchParse.MkRemote b2 b3 ->
                                     GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.shows9
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          BranchParse.$fShowRemote2
                                          (GHC.Base.++
                                             @ GHC.Types.Char
                                             b2 `cast` (BranchParse.NTCo:Branch[0])
                                             (GHC.Types.:
                                                @ GHC.Types.Char
                                                GHC.Show.showSpace1
                                                (case b3 of wild2 {
                                                   GHC.Base.Nothing -> BranchParse.$fShowBranchInfo6
                                                   GHC.Base.Just b4
                                                   -> GHC.Types.:
                                                        @ GHC.Types.Char
                                                        GHC.Show.shows9
                                                        (GHC.Base.++
                                                           @ GHC.Types.Char
                                                           GHC.Show.$fShowMaybe1
                                                           (GHC.Base.++
                                                              @ GHC.Types.Char
                                                              (BranchParse.$fShowDistance_$cshow b4)
                                                              BranchParse.$fShowBranchInfo4)) })))) })) })))) -}
d21444aaec920e5fd2618b02f7669410
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> BranchParse.Branch
    -> GHC.Base.Maybe BranchParse.Remote
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U><L,U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: BranchParse.Branch
                   ww2 :: GHC.Base.Maybe BranchParse.Remote ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ BranchParse.Remote
                       BranchParse.$fShowRemote
                       BranchParse.$fShowBranchInfo3
                       ww2
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       BranchParse.$fShowBranchInfo2
                       (GHC.Base.++
                          @ GHC.Types.Char
                          ww1 `cast` (BranchParse.NTCo:Branch[0])
                          (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
4a5bc32a300da1fd86edd44c45c83cc9
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> BranchParse.Branch
    -> GHC.Base.Maybe BranchParse.Distance
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U><L,U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: BranchParse.Branch
                   ww2 :: GHC.Base.Maybe BranchParse.Distance ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ BranchParse.Distance
                       BranchParse.$fShowDistance
                       BranchParse.$fShowBranchInfo3
                       ww2
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       BranchParse.$fShowRemote2
                       (GHC.Base.++
                          @ GHC.Types.Char
                          ww1 `cast` (BranchParse.NTCo:Branch[0])
                          (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
38b2ca53c90c519080dcf1253a70ac8d
  $wa ::
    Test.QuickCheck.Random.QCGen -> GHC.Prim.Int# -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U>, Inline: [0],
     Unfolding: (\ w :: Test.QuickCheck.Random.QCGen
                   ww :: GHC.Prim.Int# ->
                 Test.QuickCheck.Gen.$wa2
                   @ GHC.Base.String
                   BranchParse.$fArbitraryBranch2
                     `cast`
                   (Sym (Test.QuickCheck.Gen.NTCo:Gen[0] <[GHC.Types.Char]>_R))
                   BranchParse.isValidBranch
                   (case w `cast`
                         (Test.QuickCheck.Random.NTCo:QCGen[0]) of ww1 { System.Random.TF.Gen.TFGen ww2 ww3 ww4 ww5 ww6 ww7 ->
                    case System.Random.TF.Gen.$wtfGenSplit
                           ww2
                           ww3
                           ww4
                           ww5 of ww8 { (#,#) ww9 ww10 ->
                    ww9 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) } })
                   ww) -}
01dbc60c21731e72c2918ece139135d4
  newtype Branch = MkBranch GHC.Base.String
cef72515ed3d434c3acceafa44cad2b9
  data BranchInfo
    = MkBranchInfo BranchParse.Branch
                   (GHC.Base.Maybe BranchParse.Remote)
9a679f27586adbce59110bb1536539a6
  data Distance
    = Ahead GHC.Types.Int
    | Behind GHC.Types.Int
    | AheadBehind GHC.Types.Int GHC.Types.Int
f36409d3ccbfa292533e205b4b1699da
  type MBranchInfo = GHC.Base.Maybe BranchParse.BranchInfo
5d2ed2340c29307e445aeb4812400c2f
  data Remote
    = MkRemote BranchParse.Branch (GHC.Base.Maybe BranchParse.Distance)
b64fb3da25cbbabbfb8b0c926e3f9d62
  ahead :: Text.Parsec.String.Parser BranchParse.Distance
  {- Unfolding: (BranchParse.makeAheadBehind
                   BranchParse.ahead1
                   BranchParse.Ahead) -}
3dfa6baa374deb2b7c9e5ea468c8875b
  ahead1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ahead"#) -}
332c9d368ae9a6fb54d762f5ab26145c
  aheadBehind :: Text.Parsec.String.Parser BranchParse.Distance
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                BranchParse.aheadBehind1
                  `cast`
                (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <BranchParse.Distance>_R)) -}
979e94c92c62f10cf5ee08c3fab8f089
  aheadBehind1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (BranchParse.Distance
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (BranchParse.Distance
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                   eta1 :: BranchParse.Distance
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: BranchParse.Distance
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 BranchParse.ahead
                   `cast`
                 (Text.Parsec.Prim.NTCo:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <BranchParse.Distance>_R)
                   @ b1
                   eta
                   (\ x :: BranchParse.Distance
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                      err :: Text.Parsec.Error.ParseError ->
                    BranchParse.aheadBehind2
                      x
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x1 :: BranchParse.Distance
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta1 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta2
                   (\ x :: BranchParse.Distance
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                      err :: Text.Parsec.Error.ParseError ->
                    BranchParse.aheadBehind2
                      x
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x1 :: BranchParse.Distance
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
8b41012619b029115e83a004f9cd43ec
  aheadBehind2 ::
    BranchParse.Distance
    -> forall b.
       Text.Parsec.Prim.State GHC.Base.String ()
       -> (BranchParse.Distance
           -> Text.Parsec.Prim.State GHC.Base.String ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (BranchParse.Distance
           -> Text.Parsec.Prim.State GHC.Base.String ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <S,1*U><L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
5fbdc93842917856cad24b8512582ce8
  behind :: Text.Parsec.String.Parser BranchParse.Distance
  {- Unfolding: (BranchParse.makeAheadBehind
                   BranchParse.behind1
                   BranchParse.Behind) -}
621910410718c7615a3e4c5a41a21299
  behind1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "behind"#) -}
4aaa5013f13ee1be7900d76ae78ab7d2
  branchInfo ::
    GHC.Base.String
    -> Data.Either.Either
         Text.Parsec.Error.ParseError BranchParse.MBranchInfo
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                BranchParse.branchInfo1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Data.Functor.Identity.NTCo:Identity[0]
                          <Data.Either.Either
                             Text.Parsec.Error.ParseError BranchParse.MBranchInfo>_R) -}
7faf1a13330939e7ed74c653e774d080
  branchInfo1 ::
    GHC.Base.String
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            Text.Parsec.Error.ParseError BranchParse.MBranchInfo)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ s1 :: GHC.Base.String ->
                 Text.Parsec.Prim.runPT
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ BranchParse.MBranchInfo
                   @ GHC.Types.Char
                   (Text.Parsec.String.$s$fStream[]mtok @ GHC.Types.Char)
                   BranchParse.branchInfo2
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <BranchParse.MBranchInfo>_R))
                   GHC.Tuple.()
                   (GHC.Types.[] @ GHC.Types.Char)
                   s1) -}
1ccb67dadff96e838bd718716856541a
  branchInfo2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (BranchParse.MBranchInfo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (BranchParse.MBranchInfo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                   eta1 :: BranchParse.MBranchInfo
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: BranchParse.MBranchInfo
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Text.Parsec.Char.string1
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   (Text.Parsec.String.$s$fStream[]mtok @ GHC.Types.Char)
                   BranchParse.branchInfo4
                   @ b1
                   eta
                   (\ x :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    BranchParse.branchInfo3
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x1 :: BranchParse.MBranchInfo
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta1 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta2
                   (\ x :: GHC.Base.String[OneShot]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    BranchParse.branchInfo3
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x1 :: BranchParse.MBranchInfo
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
63275351543deb764b255d2300e00ee4
  branchInfo3 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (BranchParse.MBranchInfo
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (BranchParse.MBranchInfo
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
465e34e83f58aef548a0e45e0982316b
  branchInfo4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "## "#) -}
68e6af35807a32494507fa043632fa4c
  branchOnly :: Text.Parsec.String.Parser BranchParse.MBranchInfo
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                BranchParse.branchOnly1
                  `cast`
                (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <BranchParse.MBranchInfo>_R)) -}
42e0fd71f3e749d5ccc5ce7eaacd811a
  branchOnly1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (BranchParse.MBranchInfo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (BranchParse.MBranchInfo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                   eta1 :: BranchParse.MBranchInfo
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: BranchParse.MBranchInfo
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Text.Parsec.Prim.$wa9
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   BranchParse.branchOnly3
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   @ b1
                   eta
                   (\ x :: [GHC.Types.Char]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    BranchParse.branchOnly2
                      x
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x1 :: BranchParse.MBranchInfo
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta1 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta2
                   (\ x :: [GHC.Types.Char]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    BranchParse.branchOnly2
                      x
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x1 :: BranchParse.MBranchInfo
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta4 (Text.Parsec.Error.mergeError err err')))) -}
03fa55363d952e9ecc5238111ced18ea
  branchOnly2 ::
    [GHC.Types.Char]
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (BranchParse.MBranchInfo
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (BranchParse.MBranchInfo
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ branch :: [GHC.Types.Char]
                   @ b
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                   eta1 :: BranchParse.MBranchInfo
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta3 :: BranchParse.MBranchInfo
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b ->
                 let {
                   a8 :: BranchParse.BranchInfo {- Strictness: m -}
                   = BranchParse.MkBranchInfo
                       branch `cast` (Sym (BranchParse.NTCo:Branch[0]))
                       (GHC.Base.Nothing @ BranchParse.Remote)
                 } in
                 let {
                   x :: BranchParse.MBranchInfo
                   = GHC.Base.Just @ BranchParse.BranchInfo a8
                 } in
                 Text.Parsec.Combinator.eof1
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   (Text.Parsec.String.$s$fStream[]mtok @ GHC.Types.Char)
                   GHC.Show.$fShowChar
                   @ b
                   eta
                   (\ x1 :: ()
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                      err :: Text.Parsec.Error.ParseError ->
                    eta1
                      x
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta2
                   (\ x1 :: ()
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    eta3
                      x
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta4) -}
c986542ea11bb5a7892f42702c59a82a
  branchOnly3 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <S(LSS),1*U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,A><L,A><L,C(U)>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   w2 :: Text.Parsec.Prim.State GHC.Base.String ()
                   w3 :: GHC.Types.Char
                         -> Text.Parsec.Prim.State GHC.Base.String ()
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b
                   w4 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b
                   w5 :: GHC.Types.Char
                         -> Text.Parsec.Prim.State GHC.Base.String ()
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b
                   w6 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b ->
                 case w2 of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                 case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                 Text.Parsec.Char.$wa1
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   (Text.Parsec.String.$s$fStream[]mtok @ GHC.Types.Char)
                   BranchParse.branchOnly4
                   @ b
                   ww1
                   ww5
                   ww6
                   ww7
                   ww3
                   w3
                   w6 } }) -}
519565f40d4a76557bbe1fb8f9754f22
  branchOnly4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " "#) -}
35f132e98d9b23631713e4e39cc8beec
  branchParser :: Text.Parsec.String.Parser BranchParse.MBranchInfo
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                BranchParse.branchInfo3
                  `cast`
                (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <BranchParse.MBranchInfo>_R)) -}
9b486945f446928c727016f6874801a5
  branchParser' :: Text.Parsec.String.Parser BranchParse.MBranchInfo
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                BranchParse.branchInfo2
                  `cast`
                (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <BranchParse.MBranchInfo>_R)) -}
eb867292dd528e65b4201f3ffdaa903f
  branchRemote :: Text.Parsec.String.Parser BranchParse.MBranchInfo
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                BranchParse.branchRemote1
                  `cast`
                (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <BranchParse.MBranchInfo>_R)) -}
cf2a0c6b8d0684bb34eff3ac49a3dc88
  branchRemote1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (BranchParse.MBranchInfo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (BranchParse.MBranchInfo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                   eta1 :: BranchParse.MBranchInfo
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: BranchParse.MBranchInfo
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 BranchParse.branchRemote3
                   @ b1
                   eta
                   (\ x :: BranchParse.Branch
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    BranchParse.branchRemote2
                      x
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x1 :: BranchParse.MBranchInfo
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta1 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta2
                   (\ x :: BranchParse.Branch
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    BranchParse.branchRemote2
                      x
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x1 :: BranchParse.MBranchInfo
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
0b96de62dcb378e5c974ad6babbafd7d
  branchRemote2 ::
    BranchParse.Branch
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (BranchParse.MBranchInfo
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (BranchParse.MBranchInfo
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
ecd15e2b5f3b6a0bc672536576372b83
  branchRemote3 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (BranchParse.Branch
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (BranchParse.Branch
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                   eta1 :: BranchParse.Branch
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: BranchParse.Branch
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Text.Parsec.Combinator.$wa7
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ GHC.Base.String
                   @ GHC.Types.Char
                   BranchParse.branchRemote6
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   BranchParse.branchRemote4
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Base.String>_R))
                   @ b1
                   eta
                   (\ x :: [GHC.Types.Char]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    eta1
                      x `cast` (Sym (BranchParse.NTCo:Branch[0]))
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta2
                   (\ x :: [GHC.Types.Char]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    eta3
                      x `cast` (Sym (BranchParse.NTCo:Branch[0]))
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta4) -}
d6339404bc646058b02c6f51b5f70c87
  branchRemote4 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Base.String
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Base.String
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,A><L,1*C1(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   s1 :: Text.Parsec.Prim.State GHC.Base.String ()
                   cok :: GHC.Base.String
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b
                   ds :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b
                   eok :: GHC.Base.String
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b
                   eerr :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b ->
                 Text.Parsec.Char.string1
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   (Text.Parsec.String.$s$fStream[]mtok @ GHC.Types.Char)
                   BranchParse.branchRemote5
                   @ b
                   s1
                   cok
                   eerr
                   eok
                   eerr) -}
d86f0f82dedb4757f7ecaf82b2f45174
  branchRemote5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "..."#) -}
95eb17d6971d35ea5a669999e55e2a8e
  branchRemote6 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <S(LSS),1*U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,A><L,A><L,C(U)>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   eta :: Text.Parsec.Prim.State GHC.Base.String ()
                   eta1 :: GHC.Types.Char
                           -> Text.Parsec.Prim.State GHC.Base.String ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta3 :: GHC.Types.Char
                           -> Text.Parsec.Prim.State GHC.Base.String ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b ->
                 case eta of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                 case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                 Text.Parsec.Char.$wa
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   (Text.Parsec.String.$s$fStream[]mtok @ GHC.Types.Char)
                   Text.Parsec.Char.anyChar2
                   @ b
                   ww1
                   ww5
                   ww6
                   ww7
                   ww3
                   eta1
                   eta4 } }) -}
b1be1c1695116ee0c404a221506aaf01
  branchRemoteTracking ::
    Text.Parsec.String.Parser BranchParse.MBranchInfo
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                BranchParse.branchRemoteTracking1
                  `cast`
                (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <BranchParse.MBranchInfo>_R)) -}
18242e02ab7b099184b96fb478ab5650
  branchRemoteTracking1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (BranchParse.MBranchInfo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (BranchParse.MBranchInfo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                   eta1 :: BranchParse.MBranchInfo
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: BranchParse.MBranchInfo
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 BranchParse.branchRemote3
                   @ b1
                   eta
                   (\ x :: BranchParse.Branch
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    BranchParse.branchRemoteTracking2
                      x
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x1 :: BranchParse.MBranchInfo
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta1 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta2
                   (\ x :: BranchParse.Branch
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    BranchParse.branchRemoteTracking2
                      x
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x1 :: BranchParse.MBranchInfo
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
115636163b08d79fab7eb5ebb3c8373e
  branchRemoteTracking2 ::
    BranchParse.Branch
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (BranchParse.MBranchInfo
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (BranchParse.MBranchInfo
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
4948d12ae754a5a93c1ae19a6ed42dd1
  getDistance ::
    BranchParse.Remote -> GHC.Base.Maybe BranchParse.Distance
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: BranchParse.Remote ->
                 case ds of wild { BranchParse.MkRemote ds1 md -> md }) -}
4efc79c0d0cc9bc808841b5dac04abe3
  inBrackets :: Text.Parsec.String.Parser BranchParse.Distance
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                BranchParse.inBrackets1
                  `cast`
                (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <BranchParse.Distance>_R)) -}
4f31563d8dc97634dc89d6028d6003cd
  inBrackets1 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (BranchParse.Distance
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (BranchParse.Distance
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   eta3 :: Text.Parsec.Prim.State GHC.Base.String ()
                   eta4 :: BranchParse.Distance
                           -> Text.Parsec.Prim.State GHC.Base.String ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta5 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta6 :: BranchParse.Distance
                           -> Text.Parsec.Prim.State GHC.Base.String ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta7 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b ->
                 Text.Parsec.Combinator.between2
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ GHC.Types.Char
                   @ BranchParse.Distance
                   BranchParse.inBrackets5
                   BranchParse.inBrackets3
                   BranchParse.inBrackets2
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <BranchParse.Distance>_R))
                   @ b
                   eta3
                   eta4
                   eta5
                   eta6
                   eta7) -}
c0fd8292edd6c636bd04f43c8d5d86e6
  inBrackets2 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (BranchParse.Distance
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (BranchParse.Distance
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,C(U)> -}
90ae4966db202dd2c1eba58183abfb3c
  inBrackets3 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Types.Char
  {- Unfolding: (Text.Parsec.Char.char
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   (Text.Parsec.String.$s$fStream[]mtok @ GHC.Types.Char)
                   BranchParse.inBrackets4) -}
d13183ab740d50f3941b1a432ec2d642
  inBrackets4 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# ']') -}
4fdbb2ae59808d089122316f3ac3f411
  inBrackets5 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Types.Char
  {- Unfolding: (Text.Parsec.Char.char
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   (Text.Parsec.String.$s$fStream[]mtok @ GHC.Types.Char)
                   BranchParse.inBrackets6) -}
59f50f0ff1480c4824aef4f601827cd9
  inBrackets6 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# '[') -}
a75732e924995e2f0c8e6511c73a1a8d
  isValidBranch :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ b :: GHC.Base.String ->
                 letrec {
                   go :: [[GHC.Types.Char] -> GHC.Types.Bool] -> [GHC.Types.Bool]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds :: [[GHC.Types.Char] -> GHC.Types.Bool] ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ GHC.Types.Bool
                       : y ys -> GHC.Types.: @ GHC.Types.Bool (y b) (go ys) }
                 } in
                 let {
                   $sgo :: ([GHC.Types.Char] -> GHC.Types.Bool)
                           -> [[GHC.Types.Char] -> GHC.Types.Bool] -> [GHC.Types.Bool]
                     {- Arity: 2, Strictness: <L,U><L,U> -}
                   = \ sc :: [GHC.Types.Char] -> GHC.Types.Bool
                       sc1 :: [[GHC.Types.Char] -> GHC.Types.Bool] ->
                     GHC.Types.: @ GHC.Types.Bool (sc b) (go sc1)
                 } in
                 case (BranchParse.isValidBranch_go
                         ($sgo (GHC.List.null @ GHC.Types.Char) BranchParse.isValidBranch1))
                        `cast`
                      (Data.Monoid.NTCo:Any[0]) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
92eb15ed23f315a98fc5c980689bd2b0
  isValidBranch1 :: [[GHC.Types.Char] -> GHC.Types.Bool]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char] -> GHC.Types.Bool)
                   BranchParse.isValidBranch10
                   BranchParse.isValidBranch2) -}
9599387f9dc9a2598406b7890dc4181c
  isValidBranch10 :: [GHC.Types.Char] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (GHC.List.elem
                   @ GHC.Types.Char
                   GHC.Classes.$fEqChar
                   BranchParse.isValidBranch11) -}
588d225a5e07c31584c49bac55dab194
  isValidBranch11 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# ' ') -}
862e542172190b093755d489d18f9fcb
  isValidBranch2 :: [[GHC.Types.Char] -> GHC.Types.Bool]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char] -> GHC.Types.Bool)
                   BranchParse.isValidBranch8
                   BranchParse.isValidBranch3) -}
f7bb9f2b738b29de1b9917cfce202e17
  isValidBranch3 :: [[GHC.Types.Char] -> GHC.Types.Bool]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char] -> GHC.Types.Bool)
                   BranchParse.isValidBranch7
                   BranchParse.isValidBranch4) -}
d8da9adb2722120e825b6a9cf34c9a51
  isValidBranch4 :: [[GHC.Types.Char] -> GHC.Types.Bool]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char] -> GHC.Types.Bool)
                   BranchParse.isValidBranch5
                   (GHC.Types.[] @ ([GHC.Types.Char] -> GHC.Types.Bool))) -}
c54ea3d1167a9db824d6856792d43577
  isValidBranch5 :: [GHC.Types.Char] -> GHC.Types.Bool
  {- Arity: 1,
     Unfolding: (Data.OldList.isSuffixOf
                   @ GHC.Types.Char
                   GHC.Classes.$fEqChar
                   BranchParse.isValidBranch6) -}
ea73fc1c3305590da7c736e5a403a589
  isValidBranch6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "."#) -}
523670b88224ffea809087c305e3b773
  isValidBranch7 :: [GHC.Types.Char] -> GHC.Types.Bool
  {- Arity: 1,
     Unfolding: (Data.OldList.isPrefixOf
                   @ GHC.Types.Char
                   GHC.Classes.$fEqChar
                   BranchParse.isValidBranch6) -}
c5d05e090f47d06e31de83a7992f9993
  isValidBranch8 :: [GHC.Types.Char] -> GHC.Types.Bool
  {- Arity: 1,
     Unfolding: (Data.OldList.isInfixOf
                   @ GHC.Types.Char
                   GHC.Classes.$fEqChar
                   BranchParse.isValidBranch9) -}
036c6e5c62dfa599151084c6f3db5356
  isValidBranch9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ".."#) -}
19976f4d4de14cb6e11ecb0f05ba3f44
  isValidBranch_go :: [GHC.Types.Bool] -> Data.Monoid.Any
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
0d878254ae5a935cd1e6bb42641f69af
  makeAheadBehind ::
    GHC.Base.String
    -> (GHC.Types.Int -> BranchParse.Distance)
    -> Text.Parsec.String.Parser BranchParse.Distance
  {- Arity: 2, Strictness: <L,1*U><L,C(U)> -}
3fbcb48edff038414d95e5a4163a1d7d
  newRepo :: Text.Parsec.String.Parser BranchParse.MBranchInfo
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                BranchParse.newRepo1
                  `cast`
                (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <BranchParse.MBranchInfo>_R)) -}
35d588086330322d1753ab15f7fecb7f
  newRepo1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (BranchParse.MBranchInfo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (BranchParse.MBranchInfo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                   eta1 :: BranchParse.MBranchInfo
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: BranchParse.MBranchInfo
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Text.Parsec.Char.string1
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   (Text.Parsec.String.$s$fStream[]mtok @ GHC.Types.Char)
                   BranchParse.newRepo2
                   @ b1
                   eta
                   (\ x :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    BranchParse.branchOnly1
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x1 :: BranchParse.MBranchInfo
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta1 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta2
                   (\ x :: GHC.Base.String[OneShot]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    BranchParse.branchOnly1
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x1 :: BranchParse.MBranchInfo
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
9bee42227750b3b95d74cbe1d6bf63de
  newRepo2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Initial commit on "#) -}
b132be4d43fc5eca52b45990449ac79c
  noBranch :: Text.Parsec.String.Parser BranchParse.MBranchInfo
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                BranchParse.noBranch1
                  `cast`
                (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <BranchParse.MBranchInfo>_R)) -}
0c7cbff0f25d80a6d9b5089cc08e7b5b
  noBranch1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (BranchParse.MBranchInfo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (BranchParse.MBranchInfo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                   eta1 :: BranchParse.MBranchInfo
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: BranchParse.MBranchInfo
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Text.Parsec.Combinator.$wa7
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ GHC.Base.String
                   @ GHC.Types.Char
                   BranchParse.branchRemote6
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   BranchParse.noBranch3
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Base.String>_R))
                   @ b1
                   eta
                   (\ x :: [GHC.Types.Char]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    BranchParse.noBranch2
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x1 :: BranchParse.MBranchInfo
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta1 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta2
                   (\ x :: [GHC.Types.Char]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    BranchParse.noBranch2
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x1 :: BranchParse.MBranchInfo
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
9ecc81ee4e7f71de8801ecb8768e40f6
  noBranch2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (BranchParse.MBranchInfo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (BranchParse.MBranchInfo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                   eta1 :: BranchParse.MBranchInfo
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: BranchParse.MBranchInfo
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Text.Parsec.Combinator.eof1
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   (Text.Parsec.String.$s$fStream[]mtok @ GHC.Types.Char)
                   GHC.Show.$fShowChar
                   @ b1
                   eta
                   (\ x :: ()
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                      err :: Text.Parsec.Error.ParseError ->
                    eta1
                      (GHC.Base.Nothing @ BranchParse.BranchInfo)
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta2
                   (\ x :: ()
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    eta3
                      (GHC.Base.Nothing @ BranchParse.BranchInfo)
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta4) -}
5df0a211f5431e1025382bd9dcbb2efe
  noBranch3 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Base.String
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Base.String
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,A><L,1*C1(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   s1 :: Text.Parsec.Prim.State GHC.Base.String ()
                   cok :: GHC.Base.String
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b
                   ds :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b
                   eok :: GHC.Base.String
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b
                   eerr :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b ->
                 Text.Parsec.Char.string1
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   (Text.Parsec.String.$s$fStream[]mtok @ GHC.Types.Char)
                   BranchParse.noBranch4
                   @ b
                   s1
                   cok
                   eerr
                   eok
                   eerr) -}
8a1989bfe771cce8fa07120757830345
  noBranch4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " (no branch)"#) -}
ba40fccafa85bd60d610c68af4cd89a8
  pairFromDistance ::
    BranchParse.Distance -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: BranchParse.Distance ->
                 case ds of wild {
                   BranchParse.Ahead n -> (n, BranchParse.pairFromDistance1)
                   BranchParse.Behind n -> (BranchParse.pairFromDistance1, n)
                   BranchParse.AheadBehind m n -> (m, n) }) -}
e2c44220a761dc50467947c1c41e278a
  pairFromDistance1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
920f999a50f799e5da2d0e411f6e391a
  trackedBranch :: Text.Parsec.String.Parser BranchParse.Branch
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                BranchParse.branchRemote3
                  `cast`
                (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <BranchParse.Branch>_R)) -}
instance Test.QuickCheck.Arbitrary.Arbitrary [BranchParse.Branch]
  = BranchParse.$fArbitraryBranch
instance Test.QuickCheck.Arbitrary.Arbitrary [BranchParse.Distance]
  = BranchParse.$fArbitraryDistance
instance GHC.Classes.Eq [BranchParse.Branch]
  = BranchParse.$fEqBranch
instance GHC.Classes.Eq [BranchParse.BranchInfo]
  = BranchParse.$fEqBranchInfo
instance GHC.Classes.Eq [BranchParse.Distance]
  = BranchParse.$fEqDistance
instance GHC.Classes.Eq [BranchParse.Remote]
  = BranchParse.$fEqRemote
instance GHC.Show.Show [BranchParse.Branch]
  = BranchParse.$fShowBranch
instance GHC.Show.Show [BranchParse.BranchInfo]
  = BranchParse.$fShowBranchInfo
instance GHC.Show.Show [BranchParse.Distance]
  = BranchParse.$fShowDistance
instance GHC.Show.Show [BranchParse.Remote]
  = BranchParse.$fShowRemote
"SPEC/BranchParse $dmshowsPrec @ Branch" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                     BranchParse.Branch
  GHC.Show.$dmshowsPrec @ BranchParse.Branch $dShow
  = BranchParse.$fShowBranch_$s$dmshowsPrec
"SPEC/BranchParse $dmshowsPrec @ Distance" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                       BranchParse.Distance
  GHC.Show.$dmshowsPrec @ BranchParse.Distance $dShow
  = BranchParse.$fShowDistance_$s$dmshowsPrec
"SPEC/BranchParse $dmshrink @ Branch" [ALWAYS] forall $dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                       BranchParse.Branch
  Test.QuickCheck.Arbitrary.$dmshrink @ BranchParse.Branch
                                      $dArbitrary
  = BranchParse.$fArbitraryBranch_$s$dmshrink
"SPEC/BranchParse $dmshrink @ Distance" [ALWAYS] forall $dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                         BranchParse.Distance
  Test.QuickCheck.Arbitrary.$dmshrink @ BranchParse.Distance
                                      $dArbitrary
  = BranchParse.$fArbitraryDistance_$s$dmshrink
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

