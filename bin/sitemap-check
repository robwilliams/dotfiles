#!/usr/bin/env ruby
require 'nokogiri'
require 'open-uri'
require 'net/http'
require 'optparse'
require 'csv'

class SitemapCheck

  def initialize(opts = {})
    @sitemap_file = opts[:sitemap_file]
    @different_host = URI(opts[:different_host]) rescue nil
    @output_file = opts[:output_file]
    @verbose = opts[:verbose]
  end

  def check!
    responses = uris.map do |uri|
      
      if check_different_host?
        uri.host = @different_host.host
        uri.port = @different_host.port
        log "Switched host to #{@different_host}"
      end
     
      log "Fetching #{uri}"
      response_uri, response = fetch(uri)
      result = {
        :uri => uri.to_s,
        :response => response.code,
        :redirected_to => (response_uri.to_s != uri.to_s ? response_uri : nil) 
      }
      log result.inspect
      log "---"
      result
    end

    output_responses_to_csv(responses) if output_to_file?
  end

  protected
  def fetch(uri)
    response = Net::HTTP.get_response(uri)
    if response == Net::HTTPRedirection
      location = response['location']
      response = fetch(URI(location))
    end
    [uri, response]
  end

  def output_responses_to_csv(responses)
    CSV.open(@output_file, "wb") do |csv|
      csv << responses.first.map(&:first) # Header
      responses.each {|response|
        csv << response.values
      }
    end
  end

  def log(message)
    puts message if verbose?
  end

  def verbose?
    @verbose
  end

  def output_to_file?
    @output_file
  end

  def check_different_host?
    @different_host
  end

  def sitemap
    @sitemap ||= Nokogiri::XML(open(@sitemap_file))
  end

  def uris
    @uris ||= sitemap.css("loc").map { |url| URI(url) }
  end
end

class SitemapCheckOptions
  def self.parse(args)
    options = {}
    opts = OptionParser.new do |opts|
      opts.banner = "Usage: sitemap-check "
      opts.on('-s', '--sitemap PATH', 'sitemap.xml to use. Can be a URI or local path') do |path|
        options[:sitemap_file] = path
      end
      opts.on('-o', '--output-file PATH', 'where to output the results') do |path|
        options[:output_file] = path
      end
      opts.on('-d', '--different-host HOST', 'apply sitemap to different host') do |host|
        options[:different_host] = host
      end
      options[:verbose] = false
      opts.on('-v', '--verbose', 'apply sitemap to different host') do
        options[:verbose] = true
      end
    end

    begin
      opts.parse!(args)
      mandatory = [:sitemap_file]
      missing = mandatory.select {|param| options[param].nil? }
      unless missing.empty?
        puts "Missing options: #{missing.join(', ')}"
        raise
      end
    rescue => e
      puts e.message.capitalize + "\n"
      puts opts
      exit 1
    end
    options
  end
end

if __FILE__ == $0
  options = SitemapCheckOptions.parse(ARGV)
  sc = SitemapCheck.new(options)
  sc.check!
end
